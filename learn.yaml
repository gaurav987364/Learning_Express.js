sabse phle hame package.json me script likhni hoti hai taki ham apne server ko start kar sake

files to modify there:[
 type:"module",
  "scripts": {
    "start": "nodemon server.js"
  }
];

now we have to make variable app and called the express function;




Note::- make sure to save every file using ctrl+s because jab tak hme har chote se chote change ke baad save ni karege to it wont works ok

📦packege no.1 => dotenv npm i dotenv
=> this package loads the environment variable into the process.env.
use krna acha hai is package ko kahi bar import export of env variable me issue ata haai.

📦Packege no.2 => concurrently npm i concurrently
=> this package is used to run the multiple scripts at same time like for backend and frontend at same time..

📦packege no.3 => cookie-parser
=> this is most famous package used for parsed the cookies from the client into proper format for setup it we have to instal it and import from package and app.use(cookie-parser()).




//GET request:-

req:- it contains all the things which we send from client side like headers, cookies, query parameters etc...
const {name,email,passsword} =  req.body;

res:- it contains data things which we send to client side from server like status code, headers, body etc...
res.status(200).send({our data});

'/' means jab koi user is route ko visit karega server ka kaam hai res dena because ye ek get request ke tarah hai

app.get("/",(req,res)=>{
  res.send("Hello World");
});

"/api/users" :- it is industry practise that folow everyone for apis;






//Route Params or parameters
(basically kisi id ya name ya other info ke based par data return krna)

hame validation pure tarike se likhna hota hai server side pe like id aygi string me to usko convert krege number me , or validate karege agar id proper number nahi hai to res(400) bad request ya id not valid ka
more validate krege user ko ya data ko absed on id etc.

app.get("/api/users/:id", (req,res)=>{
  const id = parseInt(req.params.id)
});






//Query Params or parameters
=> sabse phle to query parameters ko smjaho ye ? question mark ke baad se start hote hai or ye ek type se key=value pairs hoti hai always;jiske base par hm many actions perform karte hai ok

https://localhost:4000/api/users?sort=name&value=gaurav
//output from console.log(req.query) in server=>{ sort: 'name',value:"gaurav" }











//POST request--

it means we (client) send data to server an after validate that data server is store this into database; simple;
just like get request we see response data in the console or browser we dont send data from browser to server we need to use tools like Postman and thunderclient extension in vs code ok;

all of the data from client we recieve in the req.body always ok;

so we make post request to server

app.post("/api/users",(req,res)=>{
  const {name,email,passsword} =  req.body;
  // validate data here

Note:-- Here is point to remember that when we send request from our client to our route and console.log(req.body) it print undefined to the console because express ko hame batana padega ki hm jo data bj rahe hai vo hm json me bj rahe hai to hme express me middleware setup krna padega 

#app.use(express.json()); isko invoke krake is tarike se ok;;









Q:-- Difference b/w Put and Patch req.???;

PUT:->The PUT method is used for full updates. It completely replaces the current state of a resource with the data provided in the request.
If a property is missing in the request body, it will be removed from the resource.

eg:- we have one object in db;
{ "name": "John", "age": 30, "city": "New York" }

Now we send Put request with 
{ "name": "John", "age": 31 }

so the updated object is 
{ "name": "John", "age": 31 }

Patch:-The PATCH method is used for partial updates. It modifies only the specified fields in the resource without altering the rest.
If a property is missing in the request body, it remains unchanged in the resource.

eg:- we have one object in db;
{ "name": "John", "age": 30, "city": "New York" }

doing request with :
{ "age": 31 }

updated object is :
{ "name": "John", "age": 31, "city": "New York" }

In summary:

==>>>> Use PUT when you want to replace the entire resource.
==>>>> Use PATCH when you want to update specific parts of the resource.


//PUT Request:-  done with these check code...
//PATCH Request:- done with these check code...
//DELETE Request:- done with these check code...


















// Middlewares:- Dalla in hindi
just a function which works b/w two different functions; we can use middleware functions to add and extra functionality for things which can share same logic;

hma middleware ka use isliye krte hai taki ham additional chijee check kr sake before doing the actual things

Note: middleware is register in the app after creating the app and before the all methods in b/w both ok...

(req,res,next)=>{};

this next is also take argument new Error("Error ok")
next(new Error("Error"));

//How it works suppose we send req. to our route but in b/w we set ek middleware to request phle uspe aygi fir aage ka kaam hoga vo bhi tab jab hm next function ko call karege agarnahi kiya to aage work nahi kaeraga kuch bhi udhr se hi return hojayga.

** Ham middleware ko 2 tarike se add krte hai :--

1. app.use(ourMiddlewareName);

2. app.get("/api/users", ourMiddlewareName,(req,res)=>{
  // rest of the code
});



//** Validations in Express.js

we have to validate the data before saving that into the database because sometimes there are isssue even though we have client side form validation, server-side validation is more important that that.

***package called express-validator we use here;***
npm i express-validator

import {query, validationResults, body, matchData} from "express-validator";

//query for query params ka validation,
//validationResults for getting errors info,
//body for writing validation on the client side data,
//matchData function for getting and matching the validate data and then use this valid data to save in db;

query for validate the query field and validationResults is a function that  takes and req as argument and return the biodata of errors and other things

**/ we have two way of writing and validation like register on top but it not working fine and 2nd way is write into method like register just like middleware in the array form [
  write your validation here all
]








* Routes *
routs in express are like small aplication in it; we are using routes in seprate folder and file and after making that we register them to main app.ok as middleware

folder:- routes -> userRoute.js
                   productRoute.js ,etc...

const router = Router();
export default router;

on server.js

app.use("/api/users", userRoute);




*/ Cookies /*

cookies are the small piece of data which can be store on the client side and later it sends back to server with each request of the user...means (suppose hmne ek cart system banaya user ne cart pe items store kiye to hmene first time  usko cookie bji on login/regsiter krne par ab user data add krkek 1 week baad akar duabar jab server ko requests krta hai to usko vahi items mil jate hai dekhne ko ye hota hai cookies ko agar hm cookie ko localstorage me store nhi krte hai to server or https ko nhi pata ki user kon hai.  isliye stateless ko statefull banaya jata hai cookies ki help se )

Note:- hamesha cookie res data se upar bjni hoti hai ya set krni hoti hai because it is like headers vrana error ayga.

res.cookie("name of cookie", "value of cookie", {options
 maxAge : kab tak valid hai,
 expires : new Date("2022-12-31"),
 httpOnly : true,
 secure : true,
 path : "/" // by default it is /
})

 //?sending cookies to client when user visit routs
  res.cookie("socks", "10-peice", {
    maxAge: 60000,
    expires: new Date(Date.now() + 900000), // 15 minutes
    httpOnly: true, // The cookie is only accessible via HTTP requests
    secure: true, // The cookie should only be sent over secure connections (HTTPS)
  });

  //**=>getting response cookie from client with each request
  console.log(req.headers.cookie);

  //!after install cookie-parser and setup that as middleware in server file we log this console and get the actual parsed cookie;
  console.log(req.cookies);

Note:- hame agar client se ati hui cookie ko read krna hai to req.headers.cookies se hi higi varna nhai;

# req.headers.cookie;
# req.cookies;





HTTPs are stateless they dont remember users;





*/ Sessions /*
a session is a way to store the data across multiple request from the same client.It helps maintain user state, like whether they're logged in or what preferences they've selected, during their interaction with a web application.

Stateful Web Apps: HTTP is stateless (it doesn't remember users between requests), so sessions help you keep track of users across multiple requests.

Security: Sessions store sensitive information server-side instead of exposing it on the client (like cookies do).

⭐⭐⭐⭐=> The session data are stored as server-side, while the sessionID is stored in a cookie on the client.

by means of above line is :::----
this is cookie on client side=> s%3Aro7IfrGAcW_ULxrg9fqmPZxCYj3sZ4J3.aCQ58Kq8n53tTlVw%2Bz%2BTppETLdY%2BtXN7VcAGNV7toeo

this is session => Session {
  cookie: {
    path: '/',
    _expires: 2025-03-18T12:58:19.273Z,
    originalMaxAge: 6000000,
    httpOnly: true
  }
}

this is session ki id => ro7IfrGAcW_ULxrg9fqmPZxCYj3sZ4J3

//tum is id ko us cookie me dekh skte hooo;

=> Cart system flow => jab user ne website pr login kiye to usko ek cookie bji gyi with session id ok, ab jab user let suppose alag alag route pr interact krega to har bar ek session generate hoga but for same id ok, now user ne cart me product add kiye to server pr session se hmne data nikal kr db me store kr diya ab jab next time kuch din badd user vapas akr cart check krega login se cookie jaygi to for that session se cart ka data usko send kr dege ok is tarike se session ka use kiya jata hai user ke interaction ka hisab kitab rakhne ke liye....

=> Store Options: By default, session data is stored in memory, which isn't suitable for production. Use session stores like Redis, MongoDB, or MySQL for better performance and scalability.

Difference b/w cookies and session are :-

1. Storage Location;

cookie=>  Stored on the client-side (in the browser). 	
session=> Stored on the server. A session ID is sent to the client.

2.Security

cookie=> Stored in plaintext, so it can be easily intercepted.   
session=> Stored in encrypted form, making it harder for attackers to intercept.

3. size

cookie=> Can be up to 4KB.   
session=> Can be up to 4MB. or more...

4. Use cases

cookie=> For storing user preferences, authentication, and temporary data.   
session=> For maintaining user state across multiple requests.






*/ Passport.js & Authentication /*;
=> Passport.js is a authentication middleware for node.js

 npm i passport passport-local 
 //passport is package and passport-local is the strategy;

isme basiaclly hm package ka use kr rhe hai for session generate and verify user;


steps:-
 on server.js file

import passport from passport;

//setup middleware
app.use(passport.initialize());
app.use(passport.session());

//create folder called strategies and file with strategy name inside it

in this file we have to import two things one is passport package and the other is Strategy class from passport-local strategy package;

export default passport.use(
  new Strategy({options}, (username,password,done)=>{
    // find user by username

    //add validation check for user credentials

    //if everything perfect to call done function
    done(null, user); // send user

    catch(error){
      done(error, null)
    }
    })
);

// Now is file me hi ab 2 function or banage for seriealize user and de-seriealize user ok

//make routes for that but setting the middleware in that route
app.post("/api/auth", passport.authenticate, (req,res)=>{});






/* DataBases */ (NoSql db);

session store in db +> ham isliye krte hai taki agara server down jaye to session db me rahe varna to server restart se sab reset hojyag kyuki by default session store in memory;

we have to store the session in db using package called connect-mongo;

































































status code and Errors types:-

1xx: Informational:-

1.) 100 (Continue): Indicates that the server has received the request headers and the client should continue sending the body.

1.) 101 (Switching Protocols): The server is switching protocols, as requested by the client.

2xx: Success:-

2.) 200 (OK): The request was successful, and the server returned the desired resource.

2.) 201 (Created): A resource was successfully created (commonly used for POST requests).

2.) 202 (Accepted): The request has been accepted for processing but is not yet completed.

2.) 204 (No Content): The request was successful, but there is no content to send back (used when deleting resources, for example).

3xx: Redirection:-

3.) 301 (Moved Permanently): The resource has been moved permanently to a new URL.

3.) 302 (Found): The resource is temporarily located at a different URL.

3.) 304 (Not Modified): Indicates that the cached version of the resource is still valid.

4xx: Client Errors:-

4.) 400 (Bad Request): The server cannot process the request due to a client-side error (e.g., invalid input).

4.) 401 (Unauthorized): Authentication is required and has failed or has not been provided.

4.) 403 (Forbidden): The client does not have permission to access the resource.

4.) 404 (Not Found): The server cannot find the requested resource.

4.) 405 (Method Not Allowed): The request method (e.g., GET, POST) is not supported for the resource.

4.) 409 (Conflict): The request could not be completed due to a conflict with the current state of the resource (e.g., duplicate data).

4.) 422 (Unprocessable Entity): The server understands the request but cannot process it due to semantic errors (e.g., validation failed).

5xx: Server Errors:-

5.) 500 (Internal Server Error): A generic error indicating that the server encountered an unexpected condition.

5.) 501 (Not Implemented): The server does not support the functionality required to fulfill the request.

5.) 502 (Bad Gateway): The server, acting as a gateway, received an invalid response from an upstream server.

5.) 503 (Service Unavailable): The server is currently unavailable due to maintenance or overload.

5.) 504 (Gateway Timeout): The server, acting as a gateway, did not receive a timely response from an upstream server.



Common Errors in Express.js:
Here are typical errors you might encounter when working with Express.js, along with tips on handling them:

*Error: Cannot GET /route

Occurs when the route is not defined. Check if the route is correctly configured.

*Error: Request body is undefined

Happens when middleware like express.json() or body-parser is not added to parse the request body.

*CORS Error: No 'Access-Control-Allow-Origin' header

Indicates that cross-origin resource sharing (CORS) is not configured. Use the cors middleware to resolve this.

*Error: Cannot find module 'express'

Caused by a missing dependency. Check if Express is installed (npm install express).

*Unhandled Promise Rejection

Occurs when a promise is not properly handled. Use .catch() or try-catch blocks for error handling.

*Port Already in Use Error

Happens when another process is using the same port. Either free the port or use a different one.

*Error: Invalid Token

Common in authentication systems (e.g., using JWT). Handle this with appropriate validation and error handling.

*Middleware Order Issue

Middleware not working as expected because of incorrect order. Ensure middleware is added in the correct sequence.